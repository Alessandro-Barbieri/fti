#!/bin/bash

# --------------------------- Assertions public API ---------------------------

pass() {
    # Exit a test case successfully
    #
    # Parameters:
    # $1: An optional feedback message

    echo "$1" >${itf_cfg['core:assert_msg_buf']}
    exit 0
}

fail() {
    # Exit a test case in failure
    #
    # Parameters:
    # $1: An optional feedback message

    echo "$1" >${itf_cfg['core:assert_msg_buf']}
    exit 1
}

check_equals() {
    # Check if a value is equal to another or fails otherwise
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    if [ $# -lt 2 ]; then
        fail "check_equals requires at least two arguments"
    fi

    if [ $1 -ne $2 ]; then
        fail "$3"
    fi
}

check_not_equals() {
    # Check if a value is not equal to another or fails otherwise
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    if [ $# -lt 2 ]; then
        fail "check_not_equals requires at least two arguments"
    fi

    if [ $1 -eq $2 ]; then
        fail "$3"
    fi
}

check_is_zero() {
    # Check if a value is equal to zero or fails otherwise
    #
    # Parameters:
    # $1: The first numerical value
    # $2: An optional message in case of failure

    if [ $# -lt 1 ]; then
        fail "check_is_zero requires at least one argument"
    fi

    if [ $1 -ne 0 ]; then
        fail "$2"
    fi
}

check_non_zero() {
    # Check if a value is different to zero or fails otherwise
    #
    # Parameters:
    # $1: The first numerical value
    # $2: An optional message in case of failure

    if [ $# -lt 1 ]; then
        fail "check_non_zero requires at least one argument"
    fi

    if [ $1 -eq 0 ]; then
        fail "$2"
    fi
}

check_file_exists() {
    # Check if a file exists or fails otherwise
    #
    # Parameters:
    # $1: The file path

    if [ $# -lt 1 ]; then
        fail "check_file_exists requires at least two arguments"
    fi

    if ! ls $1 1>/dev/null 2>&1; then
        fail "File not found: $1"
    fi
}

assert_equals() {
    # Check if two values are equal and finalize the test with the result
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    if [ $# -lt 2 ]; then
        fail "assert_not_equals requires at least two arguments"
    fi

    check_equals $1 $2 "$3"
    pass
}

assert_not_equals() {
    # Check if two values are different and finalize the test with the result
    #
    # Parameters:
    # $1: The first value
    # $2: Another value
    # $3: An optional message in case of failure

    if [ $# -lt 2 ]; then
        fail "assert_not_equals requires at least two arguments"
    fi

    check_not_equals $1 $2 "$3"
    pass
}

assert_file_exists() {
    # Check if a file exists and finalize the test with the result
    #
    # Parameters:
    # $1: The file path

    if [ $# -lt 1 ]; then
        fail "assert_file_exists requires at least one argument"
    fi

    check_file_exists $1
    pass
}

# ------------------------- ITF Assertion Private API -------------------------

itf_get_assert_msg() {
    # Get the assertion message stored in ITF buffer

    if [ -f ${itf_cfg['core:assert_msg_buf']} ]; then
        cat ${itf_cfg['core:assert_msg_buf']}
    fi
}

itf_clear_assert_msg() {
    # Clear the assertion message stored in ITF buffer

    rm -rf "${itf_cfg['core:assert_msg_buf']}"
}
