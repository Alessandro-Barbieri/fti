#!/bin/bash
# ----------------------------- Engine Constants ------------------------------

declare -r COLOR_RESET='\033[0m'
declare -r COLOR_WHITEBOLD='\033[1m\033[37m'
declare -r COLOR_GREENBOLD='\033[1m\033[32m'
declare -r COLOR_REDBOLD='\033[1m\033[31m'
declare -r COLOR_BLUEBOLD="\033[1m\033[36m"
declare -r COLOR_MAGENTABOLD="\033[1m\033[35m"
declare -r COLOR_YELLOWBOLD="\033[1m\033[33m"

# --------------------------- Engine Configuration ----------------------------

# The FTI configuration file template
declare -r itf_cfg_file='fti_cfg_mock.cfg'

# ITF log containing the fixture and test case names that failed
declare -r itf_report_log='itf.log'

# 'itf_nranks' default value, the MPI rank count for test applications
declare -r itf_nranks_default=16 # Run on 16 MPI ranks by default

# 'itf_timeout' default value, time limit for time-sensitive test applications
declare -r itf_timeout_default=30 # 30 seconds timeout

# 'itf_maintain_app_logs' default value, flag to keep successful test logs
declare -r itf_maintain_app_logs_default=0 # Keep only if test failed

# 'itf_maintain_ckpt' default value, flag to keep checkpoint files after test
declare -r itf_maintain_ckpt_default=0 # Do not maintain checkpoint files

# 'itf_cfgfile' default value, the runtime-generated FTI config file name
declare -r itf_cfgfile_default='/tmp/configfile'

# 'itf_tstdout' default value, stdout buffer for FTI test applications
declare -r itf_tstdout_default='/tmp/fti-test.log'

itf_engine_restore_defaults() {
    # Restore the engine configuration to their default values
    #
    # This function is called after every test case 'teardown'
    # Test cases can alter these values on setup without impacting other suites

    itf_nranks=$itf_nranks_default
}

itf_nranks=$itf_nranks_default
itf_timeout=$itf_timeout_default
itf_maintain_app_logs=$itf_maintain_app_logs_default
itf_maintain_ckpt=$itf_maintain_ckpt_default
itf_cfgfile=$itf_cfgfile_default
itf_tstdout=$itf_tstdout_default

# -------------------------- Engine Runtime Variables -------------------------

############## All variables here are engine-private variables ################

# A buffer for ITF error messages so the engine can do lazy evaluation
itf_error=""
# The current loaded fixture in ITF, only one fixture can be active at a time
itf_loaded_fixture=""
# A boolean to express if the current fixture had errors, used for logging
itf_fixture_had_errors=0
# ITF variables to manage the parameters passed to the fixture test cases
itf_paramv=()

# -------------------------- Engine Variable Setters --------------------------

itf_set_timeout() {
    # Set the timeout variable for the test engine
    #
    # Parameters:
    # $1: An integer representing the timeout in seconds
    #
    # Exception:
    # The value in seconds must be greater or equal to 10

    if [[ $1 -lt "10" ]] || [[ $1 == -* ]]; then
        echo -e "Wrong argument for timeout: "$1
        echo -e "usage: [command] -t <integer -ge 10>"
        exit 0
    fi
    itf_timeout="$1"
    echo "[OPTION] Set timeout -> "$itf_timeout
}

# --------------------------- Fixture Setup Helpers ---------------------------

param_register() {
    # Register the argument names that the fixture depends on
    #
    # ITF will parse parameters automatically
    # Variables with the same names will be created and available after setup
    #
    # Parameters:
    # $@: Argument names

    while [ $# -gt 0 ]; do
        itf_paramv[${#itf_paramv[@]}]=$1
        shift
    done
}

# ------------------------ Fixture FTI Prepare Helpers ------------------------

fti_config_get() {
    # Get the value of an FTI config field
    #
    # Parameters:
    # $1: The field name in the configuration file

    echo "$(awk -v f="$1" '$1 ~ f {print $3}' <$itf_cfgfile)"
}

fti_config_set() {
    # Set the value of an FTI config field
    #
    # Parameters:
    # $1: The field name in the configuration file
    # $2: The new value for the field

    echo "$(awk -v find="$1" -v swap="$2" '$1 ~ find {$3 = swap}1' $itf_cfgfile)" >$itf_cfgfile
    echo "config_set $1=$2" | tee -a $itf_tstdout # Test Feedback
}

fti_config_set_inline() {
    # Set FTI to perform the all checkpoints inline

    fti_config_set 'inline_l2' '1'
    fti_config_set 'inline_l3' '1'
    fti_config_set 'inline_l4' '1'
}

fti_config_set_ckpts() {
    # Set the checkpoint intervals of FTI
    #
    # Parameters:
    # $1-4: [Optional] The checkpoint interval for a level

    for i in {1..4}; do
        if [ ! -z ${!i} ]; then
            fti_config_set "ckpt_l$i" "${!i}"
        fi
    done
}

# --------------------------- Fixture Test Helpers ----------------------------

app_run() {
    # Executes an MPI application
    #
    # Parameters:
    # $1: The path to the application binary
    # $@: The application's parameters
    #
    # Warning:
    # mpirun reads from stdin.
    # It makes it impossible to run mpirun while a file is open in stdin.
    # This breaks the loop as mpirun consumes the whole file contents as input.
    # To circunvent this, we redirect mpirun stdin to /dev/null
    # If this ever needs to be changed, the testrunner will need a rework.
    # Otherwise, the suite file will be consumed by mpirun.

    echo "app_run" | tee -a $itf_tstdout
    echo "parameters: $@" &>>$itf_tstdout
    (
        set -x
        mpirun $MPIRUN_ARGS -n $itf_nranks $@ &>>$itf_tstdout </dev/null
    )
    local _retval=$?
    echo "returns $_retval" | tee -a $itf_tstdout
    return $_retval
}

app_run_success() {
    # Run an MPI application and only continue the test if the app succeeds
    #
    # Parameters:
    # $1: The path to the application binary
    # $@: The application's parameters

    app_run $@
    check_is_zero $? "Test app failure exitcode=$?"
}

app_run_timeout() {
    # Executes an MPI application and kill if it takes too long
    #
    # Parameters:
    # $1: The path to the application binary
    # $@: The application's parameters

    (
        local __pid=$BASHPID
        (
            sleep $itf_timeout
            kill $__pid >/dev/null 2>&1
            return 1
        ) &
        app_run $@
    )
}

ckpt_erase_last() {
    # Erase checkpoint objects from last ITF-managed execution (app_run*)
    #
    # Parameters:
    #
    # $1: Which checkpoint object to erase
    #       values: [ 'global', 'ckpt', 'partner', 'rs-encoding', 'node' ]
    # $@: which nodes, for local objects, only if IO is not MPIIO or SIONLIB
    #       values: node directory names
    #
    # Usage Details:
    #
    # See 'itf_find_fti_objects' usage details to see which files are deleted.

    echo "checkpoint_erase $@" | tee -a $itf_tstdout
    for f in $(itf_find_fti_objects $@); do
        (
            set -x
            rm -rf $f
        )
        echo "erased: $f" &>>$itf_tstdout
    done
}

ckpt_corrupt_last() {
    # Corrupt checkpoint objects from last ITF-managed execution (app_run*)
    #
    # Parameters:
    #
    # $1: Which checkpoint object to corrupt
    #       values: [ 'global', 'ckpt', 'partner', 'rs-encoding', 'node' ]
    # $@: which nodes to delete, only used for local objects if IO is not MPIIO or SIONLIB
    #       values: integers
    #
    # Usage Details:
    #
    # See 'itf_find_fti_objects' usage details to see which files are deleted.

    echo "checkpoint_corrupt $@" | tee -a $itf_tstdout
    for f in $(itf_find_fti_objects $@); do
        (
            set -x
            echo 'corruption' | dd conv=notrunc of=$f bs=1 >/dev/null 2>&1
        )
        echo "corrupted: $f" &>>$itf_tstdout
    done
}

# ---------------------------- Fixture Assertions -----------------------------

pass() {
    # Exit a test case successfully
    #
    # Parameters:
    # $1: An optional feedback message

    print_color $COLOR_GREENBOLD "Passed"
    if [ $# -eq 1 ]; then
        print_color $COLOR_GREENBOLD ": $1"
    fi
    printf '\n'
    exit 0
}

fail() {
    # Exit a test case in failure
    #
    # Parameters:
    # $1: An optional feedback message

    print_color $COLOR_REDBOLD "Failed"
    if [ $# -eq 1 ]; then
        print_color $COLOR_REDBOLD ": $1"
    fi
    printf '\n'
    exit 1
}

check_equals() {
    # Check if a value is equal to another and finalize test case if not equals
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    if [ $1 -ne $2 ]; then
        fail "$3"
    fi
}

check_not_equals() {
    # Check if a value is not equal to another and finalize test case if equals
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    if [ $1 -eq $2 ]; then
        fail "$3"
    fi
}

check_is_zero() {
    # Check if a value is equal to zero and finalize test case if different
    #
    # Parameters:
    # $1: The first numerical value
    # $2: An optional message in case of failure

    if [ $1 -ne 0 ]; then
        fail "$2"
    fi
}

check_non_zero() {
    # Check if a value is different to zero and finalize test case if equals
    #
    # Parameters:
    # $1: The first numerical value
    # $2: An optional message in case of failure

    if [ $1 -eq 0 ]; then
        fail "$2"
    fi
}

assert_equals() {
    # Assert if a value is equal to another and finalize test case
    #
    # Parameters:
    # $1: The first numerical value
    # $2: Another numerical value
    # $3: An optional message in case of failure

    check_equals $1 $2 "$3"
    pass
}

assert_not_equals() {
    # Assert if a value is equal to another and finalize test case
    #
    # Parameters:
    # $1: The first value
    # $2: Another value
    # $3: An optional message in case of failure

    check_not_equals $1 $2 "$3"
    pass
}

# ------------------------ Helpers for pretty printing ------------------------

print_color() {
    # Prints a string in a different color
    #
    # Parameters:
    # $1: The color to use
    # $2: The string to be printed
    #
    # Warning:
    # If the string has spaces, the caller must use double quotes.
    # ex.: print_color "This is my testname"

    printf "$1$2$COLOR_RESET"
}

iolib_name_to_id() {
    # Echo the FTI id associated to a IO library name
    #
    # Parameters:
    # $1: The IO library name
    #
    # Returns:
    # 1 if the name is not recognized by FTI

    if [ "$1" = "POSIX" ]; then
        echo '1'
    elif [ "$1" = "MPIIO" ]; then
        echo '2'
    elif [ "$1" = "FTIFF" ]; then
        echo '3'
    elif [ "$1" = "SIONLIB" ]; then
        echo '4'
    elif [ "$1" = "HDF5" ]; then
        echo '5'
    else
        return 1
    fi
}

iolib_id_to_name() {
    # Echo the IO library name associated to an FTI id
    #
    # Parameters:
    # $1: The FTI id for the IO library
    #
    # Returns:
    # 1 if the id is not recognized by FTI

    if [ "$1" = 1 ]; then
        echo 'POSIX'
    elif [ "$1" = 2 ]; then
        echo 'MPIIO'
    elif [ "$1" = 3 ]; then
        echo 'FTIFF'
    elif [ "$1" = 4 ]; then
        echo 'SIONLIB'
    elif [ "$1" = 5 ]; then
        echo 'HDF5'
    else
        return 1
    fi
}

# -------------------------- Test Runner Internals ----------------------------

itf_load_fixture() {
    # Loads the function definitions in a fixture to the current context
    #
    # Parameters:
    # $1: The fixture name without the .fixture extension

    itf_loaded_fixture="$1"
    itf_fixture_had_errors='false'
    source "$1"
    itf_clear_logs
}

itf_unload_fixture() {
    # Removes all definitions declared in a fixture
    # This should be called if the runner will execute another fixture

    unset setup
    unset prepare_fti
    unset runtest
    unset teardown

    type on_fixture_teardown &>/dev/null && on_fixture_teardown
    unset on_fixture_teardown
}

test_case() {
    # Run a test defined in a fixture with a set of input data
    #
    # Parameters:
    # $@ The parameters to be passed to the fixture setup
    #
    # Returns:
    # Non-zero values if the test fails
    #
    # Detailed:
    # Run a test case until completion and checks if it failed.
    # If it fails, append the log into a file named after the test suite.

    # Create the FTI configfile based on the mock
    cat "$itf_cfg_file" >$itf_cfgfile

    itf_param_clear    # Clear parameters from previous test case
    setup $@           # Call setup to declare arguments and other data
    itf_param_parse $@ # Parse the test case arguments an ddefine variables

    # Print feedback
    echo "$(itf_describe_test_case)"

    # Prepare the FTI config file
    type prepare_fti &>/dev/null && prepare_fti

    # Execute the test fixture
    (
        # Test if ITF has any error stored
        if [ ! -z "$itf_error" ]; then
            itf_log_test_case $itf_tstdout
            echo "$itf_error" >>$itf_tstdout
            fail "$itf_error"
        fi
        # Setup the config file with standarized variable names
        itf_set_default_variables_to_config
        # Run the test
        runtest
    )
    local __exitcode=$?
    # Save logs if needed
    itf_append_logs $__exitcode

    # Call the test case teardown
    type teardown &>/dev/null && teardown

    # Remove the global, local and meta directories
    if [ $itf_maintain_ckpt -eq 0 ]; then
        echo "LORLZ"
        local _locdir="$(fti_config_get 'ckpt_dir')"
        local _globaldir="$(fti_config_get 'glbl_dir')"
        local _metadir="$(fti_config_get 'meta_dir')"
        rm -rf $_locdir $_globaldir $_metadir
    fi

    # Resto the engine configuration defaults
    itf_engine_restore_defaults

    # Remove the config files and test stdout
    rm -rf $itf_cfgfile $itf_tstdout
    # Return the test exit code
    return $__exitcode
}

# ---------------------------- Engine Log handling ----------------------------

itf_get_fixture_failure_log() {
    # Get the failure log filename for the current fixture

    echo "$itf_loaded_fixture-failed.log"
}

itf_get_fixture_full_log() {
    # Get the log filename for the current fixture

    echo "$itf_loaded_fixture-all.log"
}

itf_clear_logs() {
    # Delete all log files managed by ITF

    rm -rf "$(itf_get_fixture_failure_log)"
    rm -rf "$(itf_get_fixture_full_log)"
    rm -rf "$itf_report_log"
}

itf_log_test_case() {
    # Log the test case into a log file
    #
    # Parameters:
    # $1: The log file

    local _test_name=""
    for p in "${itf_paramv[@]}"; do
        _test_name="${_test_name}--$p ${!p} "
    done
    echo $_test_name >>$1
    echo "" >>$1 # new line feed
}

itf_append_logs() {
    # Append test case to the different logs based on the test status
    #
    # Parameters:
    # $1: The test status

    # A log containing stdout of failed tests
    local faillog="$(itf_get_fixture_failure_log)"
    # A log containing stdout of successfull tests
    local normallog="$(itf_get_fixture_full_log)"

    # Check if the test has failed
    if [ $1 -ne 0 ]; then
        # Always push the test stdout into the log
        itf_log_test_case $itf_tstdout
        cat $itf_tstdout >>$faillog
        echo "" >>$faillog # line feed

        # Check if this is the first failure in the fixture
        if [ $itf_fixture_had_errors == 'false' ]; then
            itf_fixture_had_errors='true'
            # Push the fixture name into the ITF report
            echo $itf_loaded_fixture >>$itf_report_log
        fi

        # Log the test arguments into ITF report
        itf_log_test_case $itf_report_log
    fi

    # Check if ITF is configured to save all logs
    if [ $itf_maintain_app_logs -eq 1 ]; then
        itf_log_test_case $itf_tstdout
        cat $itf_tstdout >>$normallog
        echo "" >>$faillog # line feed
    fi
}

# --------------------------- ITF Interal functions ---------------------------

itf_describe_test_case() {
    # Describe the current test case in terms of its arguments and values

    for p in "${itf_paramv[@]}"; do
        print_color $COLOR_BLUEBOLD "$p="
        # IOLib has a direct string representation
        if [ $p == 'iolib' ]; then
            print_color $COLOR_WHITEBOLD "$(iolib_id_to_name $iolib) "
        else
            print_color $COLOR_WHITEBOLD "${!p} "
        fi
    done
}

itf_find_fti_objects() {
    # Find checkpoint objects from last ITF-managed execution (app_run*)
    #
    # Parameters:
    #
    # $1: Which checkpoint object to find
    #       values: [ 'global', 'ckpt', 'partner', 'rs-encoding', 'node' ]
    # $@: which nodes to delete, for local, if IO is not MPIIO or SIONLIB
    #       values: node names
    #
    # Usage Details:
    #
    # When the object is 'global' returns:
    # - The L4 directory in the FTI Global archive
    # When the object is 'ckpt' returns:
    # - First local checkpoint file, in a given level, for every supplied node
    # When the object is 'partner' returns:
    # - First local partner file, in a given level, for every supplied node
    # When the object is 'rs-encoding' returns:
    # - First local RS-encoding, in a given level, for every supplied node
    # When the object is 'node' returns:
    # - Local node directory for every supplied node

    if [ ! $1 == 'global' ] && [ -z $level ]; then
        fail '$level variable must be set for ITF to delete checkpoint files'
    fi

    local _id=$(fti_config_get 'exec_id')
    local _erase_all='false'

    # Switch action depending on the checkpoint object suppllied
    case $1 in
    global)
        # When deleting from global, delete everything
        echo "$(fti_config_get 'glbl_dir')/$_id/l4"
        return 0
        ;;
    ckpt)
        local _what='Rank'
        ;;
    partner)
        local _what='Pcof'
        ;;
    rs-encoding)
        local _what='RSed'
        ;;
    node)
        # When erasing the node, we delete all local information
        _erase_all='true'
        ;;
    *)
        fail "checkpoint object type malformed $1, try one of the following: "\
            "'global', 'ckpt', 'partner' or 'rs-encoding', 'node'"
        ;;
    esac
    shift

    local _where="$(fti_config_get 'ckpt_dir')"
    local _files=""
    for i in $@; do
        if [ $_erase_all == 'true' ]; then
            _files="$_files $_where/$i"
        else
            _files="$_files "\
                "$(find $_where/$i/$_id/l$level | grep "$_what" | head -n 1)"
        fi
    done
    echo "$_files"
}

itf_param_clear() {
    # Clear the set of parameters managed by ITF

    for i in ${itf_paramv[@]}; do
        unset $i
    done

    itf_error=""
    itf_paramv=()
}

itf_set_default_variables_to_config() {
    # Set up the config file using ITF standard variables names
    #
    # This method is always called after the test case 'setup'

    if [ ! -z $iolib ]; then
        fti_config_set 'ckpt_io' "$iolib"
    fi
    if [ ! -z $head ]; then
        fti_config_set 'head' "$head"
    fi
    if [ ! -z $keep ]; then
        fti_config_set 'keep_last_ckpt' "$keep"
    fi
}

itf_param_parse() {
    # Parse the parameters passed against the ones registered in ITF
    #
    # Parametes:
    # $@ The parameters to be parsed
    #
    # Usage:
    # Use this function after registering the parameters with:
    # - param_register
    #
    # This function will parse the parameters and setup variables acordingly
    #
    # Example:
    # param_register 'iolib' 'head'
    # itf_param_parse --iolib 1 --head 0
    # echo $iolib # should output 1
    # echo $head # should output 0

    # Define all variables from input parameters
    while [ $# -gt 1 ]; do
        local _found='false'
        for p in ${itf_paramv[@]}; do
            if [ $1 == "--$p" ]; then
                eval $p=$2
                local _found='true'
            fi
        done
        if [ $_found == 'false' ]; then
            itf_error="Invalid argument $1"
            return 1
        fi
        shift
        shift
    done

    # Check if all required arguments were found
    for p in "${itf_paramv[@]}"; do
        if [ -z ${!p} ]; then
            itf_error="Argument '$p' not found"
            return 1
        fi
    done
}